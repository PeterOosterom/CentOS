---
  - name: Centos pre-upgrade
    hosts: '{{ target_host }}'
    become: yes
    become_user: root
    vars:
      ansible_python_interpreter: /usr/bin/python3
      interface_rename_map:
        eth: enx
        em: ens
        eno: eno
        enx: enx
    vars_prompt:
      - name: confirm_target
        prompt: "Is '{{ target_host }}' the correct target host? (yes/no)"
        private: no
    tasks:

      - name: Confirm target host
        fail:
          msg: "Aborted playbook execution. Confirm target host before proceeding."
        when: confirm_target != "yes"
        
      - name: Check CentOS version
        command: cat /etc/centos-release
        register: centos_release
        changed_when: false
        failed_when: false

      - name: Ensure playbook runs only on CentOS Stream 8
        fail:
          msg: "This playbook is intended to run on CentOS Stream 8 only."
        when: "'CentOS Stream release 8' not in centos_release.stdout"
        
      - name: Gather package facts
        package_facts:
          manager: auto
        register: package_facts

      - name: Check if PostgreSQL 15 is installed
        assert:
          that:
            - "'postgresql15-server' in package_facts.ansible_facts.packages"
          fail_msg: "This playbook is intended to run on machines with PostgreSQL 15 installed."

      - name: Check if xe-guest-utilities-latest.x86_64 is installed
        become: true
        command: yum list installed xe-guest-utilities-latest.x86_64
        register: yum_output
        ignore_errors: true

      - name: Create temp directory
        file:
          path: /var/temp/
          state: directory

      - name: Create backup directory
        file:
          path: /var/temp/backup/
          state: directory
          
      - name: ensure iptables-services is installed
        dnf:
          name: iptables-services
          state: latest
          
      - name: Backup current iptables rules
        shell: iptables-save > /var/temp/backup/iptables.rules

      - name: remove broken packages
        dnf:
          name: iptables 
          state: absent

      - name: Gather current network interface name 
        shell: ip -o link show | awk '$2 != "lo:" {print $2}'
        register: current_interfaces
        changed_when: false
        failed_when: false

      - name: Extract current interface name
        set_fact:
          current_interface: "{{ current_interfaces.stdout_lines[0] | regex_replace(':$', '') }}"

      - name: Predict new interface name based on current name
        set_fact:
          new_interface: >-
            {% if current_interface.startswith('eth') %}
              {{ current_interface | regex_replace('^eth', interface_rename_map['eth']) }}
            {% elif current_interface.startswith('em') %}
              {{ current_interface | regex_replace('^em', interface_rename_map['em']) }}
            {% elif current_interface.startswith('eno') %}
              {{ current_interface }}
            {% elif current_interface.startswith('enx') %}
              {{ current_interface }}
            {% else %}
              {{ current_interface }}
            {% endif %}

      - name: Ensure network-scripts directory exists
        file:
          path: /etc/sysconfig/network-scripts
          state: directory

      - name: Rename network configuration file if needed
        when: current_interface != new_interface
        block:
          - name: Copy network configuration file to new interface name
            copy:
              src: "/etc/sysconfig/network-scripts/ifcfg-{{ current_interface }}"
              dest: "/etc/sysconfig/network-scripts/ifcfg-{{ new_interface }}"
              remote_src: yes

          - name: Update interface name in configuration file
            lineinfile:
              path: "/etc/sysconfig/network-scripts/ifcfg-{{ new_interface }}"
              regexp: '^DEVICE='
              line: "DEVICE={{ new_interface }}"

          - name: Remove old network configuration file
            file:
              path: "/etc/sysconfig/network-scripts/ifcfg-{{ current_interface }}"
              state: absent
    
      - name: Remove centos 8 repos
        ansible.builtin.file:
          state: absent 
          path: /etc/yum.repos.d/

      - name: Remove centos 8 repos 
        ansible.builtin.file:
          state: directory 
          path: /etc/yum.repos.d/
                   
      - name: Fetch CentOS Stream 9 repo URLs
        shell: |
          curl -s https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/ | grep -oP '(?<=href=")centos-stream-release-9\.[0-9]+-[0-9]+\.el9\.noarch\.rpm'|sort|tail -n 1 | grep -oE '9\.[0-9]+-[0-9]+'
        register: latest_version
        changed_when: false
      
      - name: Install CentOS Stream 9 RPMs
        dnf:
          name:
          - https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/centos-stream-release-{{latest_version.stdout}}.el9.noarch.rpm
          - https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/centos-stream-repos-{{latest_version.stdout}}.el9.noarch.rpm
          - https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/centos-gpg-keys-{{latest_version.stdout}}.el9.noarch.rpm
          state: present
          
      - name: remove broken packages
        dnf:
          name: make-devel-1:4.2.1-11.el8.x86_64 
          state: absent

      - name: clean yum
        command: /bin/yum clean all 
        args:
          warn: false
      - name: Stop SSSD service
        ansible.builtin.systemd:
          name: sssd
          state: stopped

      - name: Remove SSSD cache files
        ansible.builtin.file:
          path: /var/lib/sss/db/
          state: absent

      - name: Create SSSD cache directory
        ansible.builtin.file:
          path: /var/lib/sss/db/
          state: directory
          owner: root
          group: root
          mode: '0700'

      - name: Start SSSD service
        ansible.builtin.systemd:
          name: sssd
          state: started
          
      - name: update/upgrade centos to 9
        command: dnf -y --releasever=9-stream --allowerasing --setopt=deltarpm=false distro-sync
        args:
          warn: false

      - name: Reboot host and wait for it to restart
        reboot:
          msg: "Reboot initiated by Ansible"
          connect_timeout: 5
          reboot_timeout: 600
          pre_reboot_delay: 0
          post_reboot_delay: 30
          test_command: whoami

      - name: Rebuild rpm DB
        command: sudo rpmdb --rebuilddb
        args:
          warn: false

      - name: dnf clean packages
        command: dnf clean packages
        args:
          warn: false

      - name: Install system updates for centos systems
        yum:
          name: '*'
          state: latest
          update_cache: yes

      - name: groupupdate
        command: dnf -y groupupdate "Core" "Minimal Install" --allowerasing
        args:
          warn: false
          
      - name: Remove rescue kernel
        command: rm -f /boot/vmlinuz-0-rescue-b2a198ecbfdd451cb905f76f825af01e /boot/initramfs-0-rescue-b2a198ecbfdd451cb905f76f825af01e.img /boot/loader/entries/b2a198ecbfdd451cb905f76f825af01e-0-rescue.conf
        args:
          warn: false

      - name: replace rescue kernel
        command: /usr/lib/kernel/install.d/51-dracut-rescue.install add $(uname -r) /boot /boot/vmlinuz-$(uname -r)
        args:
          warn: false

      - name: Reboot host and wait for it to restart
        reboot:
          msg: "Reboot initiated by Ansible"
          connect_timeout: 5
          reboot_timeout: 600
          pre_reboot_delay: 0
          post_reboot_delay: 30
          test_command: whoami

      - name: Remove old kernels
        command: dnf remove -y kernel-core-4.18.0-500.el8.x86_64
        args:
          warn: false

      - name: dnf modules reset 
        ansible.builtin.file:
          state: absent 
          path: /etc/dnf/modules.d

      - name: dnf modules reset 
        ansible.builtin.file:
          state: directory 
          path: /etc/dnf/modules.d
          
      - name: ensure wget
        dnf:
          name: wget
          state: latest

      - name: get packages 
        command: wget https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/libfido2-1.6.0-7.el9.x86_64.rpm https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/Packages/libcbor-0.7.0-5.el9.x86_64.rpm https://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/Packages/javapackages-filesystem-6.0.0-3.el9.noarch.rpm https://kojihub.stream.centos.org/kojifiles/packages/xorg-x11-font-utils/7.5/53.el9/x86_64/xorg-x11-font-utils-7.5-53.el9.x86_64.rpm https://rpmfind.net/linux/epel/9/Everything/x86_64/Packages/r/rcs-5.10.1-3.el9.x86_64.rpm https://vault.centos.org/centos/8-stream/AppStream/x86_64/os/Packages/authd-1.4.4-5.el8_0.1.x86_64.rpm https://vault.centos.org/centos/8-stream/AppStream/x86_64/os/Packages/xinetd-2.3.15-24.el8.x86_64.rpm  
        args:
          warn: false

      - name: install packages
        command: yum localinstall -y libfido2-1.6.0-7.el9.x86_64.rpm libcbor-0.7.0-5.el9.x86_64.rpm javapackages-filesystem-6.0.0-3.el9.noarch.rpm xorg-x11-font-utils-7.5-53.el9.x86_64.rpm authd-1.4.4-5.el8_0.1.x86_64.rpm rcs-5.10.1-3.el9.x86_64.rpm xinetd-2.3.15-24.el8.x86_64.rpm
        args:
          warn: false

      - name: ensure postgres repo
        command: dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        args:
          warn: false

      - name: fix postgres repo
        command: dnf -y reinstall https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm
        args:
          warn: false

      - name: ensure docker repo
        command: dnf -y config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
        args:
          warn: false

      - name: disable default postgres repo
        command: dnf module -y disable postgresql
        args:
          warn: false
          
      - name: clean yum
        command: /bin/yum clean all 
        args:
          warn: false

      - name: ensure postgresql15-server
        dnf:
          name: postgresql15-server
          state: present

      - name: ensure postgresql15-contrib
        dnf:
          name: postgresql15-contrib
          state: present

      - name: Check if PostgreSQL database is initialized.
        stat:
          path: "/var/lib/pgsql/15/data/pg_hba.conf"
        register: postgres

      - name: Ensure PostgreSQL database is initialized.
        command: "/usr/pgsql-15/bin/postgresql-15-setup initdb"
        when: not postgres.stat.exists

      - name: ensure apache is at the latest version
        dnf:
          name: httpd
          state: latest

      - name: ensure docker-ce is at the latest version
        dnf:
          name: docker-ce
          state: latest

      - name: ensure python3-psycopg2 is at the latest version
        dnf:
          name: python3-psycopg2
          state: latest
          
      - name: ensure apache is running
        systemd:
          name: httpd
          state: started
          enabled: true
          masked: no
   
      - name: Enable postgres service
        systemd:
          name: postgresql-15.service
          enabled: true
          masked: no
          state: started
          
      - name: dnf upgrade 
        command: dnf upgrade -y --allowerasing
        args:
          warn: false

      - name: reset xinetd
        systemd:
          name: xinetd
          state: restarted
          
      - name: ensure iptables is at the latest version
        dnf:
          name: iptables
          state: latest

      - name: ensure vi is at the latest version
        dnf:
          name: vim
          state: latest

      - name: ensure iptables-services is at the latest version
        dnf:
          name: iptables-services
          state: latest
        
      - name: ensure iptables is running
        systemd:
          name: iptables
          state: started
          enabled: true
          masked: no
          
      - name: Restore iptables rules
        shell: sudo cp /var/temp/backup/iptables.rules /etc/sysconfig/iptables
        
      - name: remove firewalld
        dnf:
          name: firewalld
          state: absent

      - name: ensure logrotate.timer is running
        systemd:
          name: logrotate.timer
          state: started
          enabled: true
          masked: no

      - name: ensure logrotate is running
        systemd:
          name: logrotate
          state: started
          enabled: true
          masked: no


      - name: ensure docker is running
        systemd:
          name: docker
          state: started
          enabled: true
          masked: no

      - name: Get list of installed kernel-related packages
        command: rpm -qa kernel\* kernel-devel\* kernel-modules\* kernel-modules-extra\* kernel-workaround\*
        register: installed_kernel_related_packages
        changed_when: false

      - name: Remove CentOS 8 kernel-related packages
        yum:
          name: "{{ item }}"
          state: absent
        loop: "{{ installed_kernel_related_packages.stdout_lines }}"
        when: "'el8' in item"
        
  - name: Refresh COLLATION VERSION in all databases
    hosts: "{{ target_host }}"
    become: yes
    become_user: postgres
    tasks:
      - name: Get hostname
        command: hostname
        register: hostname_result

      - name: Set db_name based on hostname
        set_fact:
          db_name: "{{ hostname_result.stdout | lower | regex_replace('\\..*', '') }}"

      - name: Check if the database exists
        shell: psql -lqt | cut -d \| -f 1 | grep -qw "{{ db_name }}"
        register: db_exists
        ignore_errors: yes

      - name: Refresh COLLATION VERSION for main database
        command: psql -d {{ db_name }} -c "ALTER DATABASE {{ db_name }} REFRESH COLLATION VERSION"
        args:
          warn: false
        when: db_exists.rc == 0

      - name: Refresh COLLATION VERSION for default postgres database
        command: psql -c "ALTER DATABASE postgres REFRESH COLLATION VERSION"
        args:
          warn: false

      - name: Refresh COLLATION VERSION for default template1 database
        command: psql -c "ALTER DATABASE template1 REFRESH COLLATION VERSION"
        args:
          warn: false
